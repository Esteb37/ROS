// Generated by gencpp from file challenge1/script_select.msg
// DO NOT EDIT!


#ifndef CHALLENGE1_MESSAGE_SCRIPT_SELECT_H
#define CHALLENGE1_MESSAGE_SCRIPT_SELECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace challenge1
{
template <class ContainerAllocator>
struct script_select_
{
  typedef script_select_<ContainerAllocator> Type;

  script_select_()
    : script_select()
    , type_select()
    , turn_velocity(0.0)
    , move_velocity(0.0)
    , total_time(0.0)
    , square_length(0.0)  {
    }
  script_select_(const ContainerAllocator& _alloc)
    : script_select(_alloc)
    , type_select(_alloc)
    , turn_velocity(0.0)
    , move_velocity(0.0)
    , total_time(0.0)
    , square_length(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _script_select_type;
  _script_select_type script_select;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_select_type;
  _type_select_type type_select;

   typedef float _turn_velocity_type;
  _turn_velocity_type turn_velocity;

   typedef float _move_velocity_type;
  _move_velocity_type move_velocity;

   typedef float _total_time_type;
  _total_time_type total_time;

   typedef float _square_length_type;
  _square_length_type square_length;





  typedef boost::shared_ptr< ::challenge1::script_select_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::challenge1::script_select_<ContainerAllocator> const> ConstPtr;

}; // struct script_select_

typedef ::challenge1::script_select_<std::allocator<void> > script_select;

typedef boost::shared_ptr< ::challenge1::script_select > script_selectPtr;
typedef boost::shared_ptr< ::challenge1::script_select const> script_selectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::challenge1::script_select_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::challenge1::script_select_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::challenge1::script_select_<ContainerAllocator1> & lhs, const ::challenge1::script_select_<ContainerAllocator2> & rhs)
{
  return lhs.script_select == rhs.script_select &&
    lhs.type_select == rhs.type_select &&
    lhs.turn_velocity == rhs.turn_velocity &&
    lhs.move_velocity == rhs.move_velocity &&
    lhs.total_time == rhs.total_time &&
    lhs.square_length == rhs.square_length;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::challenge1::script_select_<ContainerAllocator1> & lhs, const ::challenge1::script_select_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace challenge1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::challenge1::script_select_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::challenge1::script_select_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::challenge1::script_select_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::challenge1::script_select_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::challenge1::script_select_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::challenge1::script_select_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::challenge1::script_select_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dde5cb34cae0c7a4f86426afcd558fdc";
  }

  static const char* value(const ::challenge1::script_select_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdde5cb34cae0c7a4ULL;
  static const uint64_t static_value2 = 0xf86426afcd558fdcULL;
};

template<class ContainerAllocator>
struct DataType< ::challenge1::script_select_<ContainerAllocator> >
{
  static const char* value()
  {
    return "challenge1/script_select";
  }

  static const char* value(const ::challenge1::script_select_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::challenge1::script_select_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string script_select\n"
"string type_select\n"
"float32 turn_velocity\n"
"float32 move_velocity\n"
"float32 total_time\n"
"float32 square_length\n"
;
  }

  static const char* value(const ::challenge1::script_select_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::challenge1::script_select_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.script_select);
      stream.next(m.type_select);
      stream.next(m.turn_velocity);
      stream.next(m.move_velocity);
      stream.next(m.total_time);
      stream.next(m.square_length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct script_select_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::challenge1::script_select_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::challenge1::script_select_<ContainerAllocator>& v)
  {
    s << indent << "script_select: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.script_select);
    s << indent << "type_select: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type_select);
    s << indent << "turn_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.turn_velocity);
    s << indent << "move_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.move_velocity);
    s << indent << "total_time: ";
    Printer<float>::stream(s, indent + "  ", v.total_time);
    s << indent << "square_length: ";
    Printer<float>::stream(s, indent + "  ", v.square_length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHALLENGE1_MESSAGE_SCRIPT_SELECT_H
