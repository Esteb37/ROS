# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from challenge1/script_select.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class script_select(genpy.Message):
  _md5sum = "dde5cb34cae0c7a4f86426afcd558fdc"
  _type = "challenge1/script_select"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string script_select
string type_select
float32 turn_velocity
float32 move_velocity
float32 total_time
float32 square_length
"""
  __slots__ = ['script_select','type_select','turn_velocity','move_velocity','total_time','square_length']
  _slot_types = ['string','string','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       script_select,type_select,turn_velocity,move_velocity,total_time,square_length

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(script_select, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.script_select is None:
        self.script_select = ''
      if self.type_select is None:
        self.type_select = ''
      if self.turn_velocity is None:
        self.turn_velocity = 0.
      if self.move_velocity is None:
        self.move_velocity = 0.
      if self.total_time is None:
        self.total_time = 0.
      if self.square_length is None:
        self.square_length = 0.
    else:
      self.script_select = ''
      self.type_select = ''
      self.turn_velocity = 0.
      self.move_velocity = 0.
      self.total_time = 0.
      self.square_length = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.script_select
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type_select
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.turn_velocity, _x.move_velocity, _x.total_time, _x.square_length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.script_select = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.script_select = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type_select = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type_select = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.turn_velocity, _x.move_velocity, _x.total_time, _x.square_length,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.script_select
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type_select
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.turn_velocity, _x.move_velocity, _x.total_time, _x.square_length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.script_select = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.script_select = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type_select = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type_select = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.turn_velocity, _x.move_velocity, _x.total_time, _x.square_length,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
